# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.test import TestCase
import test_full.models as models_module
from computedfields.models import ComputedFieldsModelType
MODELS = models_module.MODELS


class GenericModelTestBase(TestCase):
    """
    Test base class to provide a customizable function and depends settings for the
    autogenerated models in various test cases.
    """
    models = models_module

    def setDeps(self, mapping):
        """
        Sets the depends values and func to a model and rebuilds the graph
        and handler mappings. The models come only with one computed field `comp`.
        All settings are applied to this field.
        Mapping should be {'modelname': {'depends' ['depend', 'strings'], 'func': some_func}}.
        Might raise a `CycleNodeException`.
        """
        models = ComputedFieldsModelType._computed_models
        for modelname, data in mapping.items():
            if data.get('depends'):
                models[MODELS[modelname]] = {'comp': data.get('depends')}
            if data.get('func'):
                MODELS[modelname]._computed_fields['comp']._computed['func'] = data.get('func')
        ComputedFieldsModelType._resolve_dependencies(_force=True)
        self.graph = ComputedFieldsModelType._graph

    def resetDeps(self):
        """
        Resets all depends and function values to initial dummies.
        Only applied to auto generated models.
        """
        models = ComputedFieldsModelType._computed_models
        for model in models:
            if not hasattr(model, 'needs_reset'):
                continue
            models[model] = {}
            for fielddata in model._computed_fields.values():
                fielddata._computed['func'] = lambda x: ''
        self.graph = None
